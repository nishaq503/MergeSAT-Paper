import random


def cnf_gen(m, k, horn=True):
    """ generates random CNF instance

    :param m: number of clauses
    :param k: number of literals
    :param horn:
    :return:
    """
    cnf = []

    def unique(arr, _k):
        while True:
            t = random.randint(1, _k)
            if t not in arr:
                break
        return t

    r = (lambda: random.randint(0, 1))
    while len(cnf) < m:
        x = unique([], k)
        y = unique([x], k)
        z = unique([x, y], k)
        c = [(x, 1), (y, 0), (z, 0)] if horn else [(x, r()), (y, r()), (z, r())]
        c = list(sorted(c))
        if c not in cnf:
            cnf.append(c)
    return list(sorted(cnf))


def cert_ver(cnf, cert):
    if cert is None:
        pass
    else:
        for literal, value in cert:
            for i, clause in enumerate(cnf):
                if (literal, value) in clause:
                    cnf[i] = None
            cnf = [c for c in cnf if c is not None]
            if len(cnf) == 0:
                break
        if len(cnf) > 0:
            for c in cnf:
                print(c)
            return False
    return True


def cnf_step(cnf, cert):
    temp = []
    while True:
        for literal, value in cert + temp:
            for i, clause in enumerate(cnf):
                if (literal, value) in clause:
                    cnf[i] = None
                elif (literal, 1 - value) in clause:
                    cnf[i] = [c for c in clause if c != (literal, 1 - value)]
            cnf = [c for c in cnf if c is not None]
            if len(cnf) > 0:
                continue
        if len(cnf) > 0:
            ls = [c for c in cnf if len(c) < 2]
            if len(ls) > 0:
                new = []
                for c in ls:
                    new.extend(c)
                new = list(set(new))
                uniques = {n for n, _ in new}
                if 0 < len(new) == len(uniques):
                    temp.extend(new)
                    continue
                else:
                    print('oops!!!')
                    print(cert)
                    print(temp)
                    break
            else:
                temp.append((cnf[0][0][0], 0))
        else:
            'eureka!!!!'
    return cnf


def check(cnf, cert):
    cert_ver(cnf, cert)
    return


def cnf_print(m, k, horn):
    instance = cnf_gen(m, k, horn)
    for i, clause in enumerate(instance):
        print(f'{i}: {clause},')


if __name__ == '__main__':
    num_clauses, num_literals = 218, 50
    # cnf_print(num_clauses, num_literals, False)
    _cnf = {
        0: [(1, 0), (3, 0), (47, 1)],
        1: [(1, 0), (6, 1), (17, 0)],
        2: [(1, 0), (9, 0), (46, 0)],
        3: [(1, 0), (10, 0), (21, 1)],
        4: [(1, 0), (25, 0), (48, 1)],
        5: [(1, 0), (31, 1), (48, 0)],
        6: [(1, 0), (34, 0), (42, 1)],
        7: [(1, 1), (2, 0), (44, 1)],
        8: [(1, 1), (3, 0), (8, 1)],
        9: [(1, 1), (5, 1), (29, 1)],
        10: [(1, 1), (15, 0), (42, 0)],
        11: [(1, 1), (23, 1), (40, 1)],
        12: [(1, 1), (24, 1), (49, 0)],
        13: [(1, 1), (26, 1), (41, 1)],
        14: [(1, 1), (28, 1), (42, 1)],
        15: [(1, 1), (32, 0), (33, 0)],
        16: [(1, 1), (32, 1), (42, 1)],
        17: [(2, 0), (3, 1), (14, 0)],
        18: [(2, 0), (7, 1), (50, 1)],
        19: [(2, 0), (12, 0), (47, 0)],
        20: [(2, 0), (16, 1), (25, 1)],
        21: [(2, 0), (25, 1), (34, 0)],
        22: [(2, 0), (27, 1), (44, 0)],
        23: [(2, 1), (3, 0), (45, 0)],
        24: [(2, 1), (4, 1), (45, 1)],
        25: [(2, 1), (6, 0), (20, 0)],
        26: [(2, 1), (10, 0), (39, 0)],
        27: [(2, 1), (17, 1), (21, 1)],
        28: [(2, 1), (22, 1), (37, 0)],
        29: [(2, 1), (36, 1), (40, 1)],
        30: [(3, 0), (6, 1), (29, 0)],
        31: [(3, 0), (12, 0), (30, 0)],
        32: [(3, 0), (22, 1), (43, 1)],
        33: [(3, 0), (32, 0), (38, 0)],
        34: [(3, 0), (39, 0), (48, 0)],
        35: [(3, 1), (10, 0), (25, 0)],
        36: [(3, 1), (11, 0), (48, 0)],
        37: [(3, 1), (19, 0), (36, 1)],
        38: [(4, 0), (6, 1), (41, 1)],
        39: [(4, 0), (8, 1), (37, 0)],
        40: [(4, 0), (9, 1), (12, 1)],
        41: [(4, 0), (22, 0), (36, 0)],
        42: [(4, 0), (32, 0), (34, 1)],
        43: [(4, 0), (35, 0), (45, 1)],
        44: [(4, 0), (38, 1), (46, 0)],
        45: [(4, 1), (6, 0), (20, 0)],
        46: [(4, 1), (8, 0), (18, 1)],
        47: [(4, 1), (9, 0), (12, 0)],
        48: [(4, 1), (10, 1), (28, 0)],
        49: [(4, 1), (11, 1), (12, 0)],
        50: [(4, 1), (14, 0), (37, 1)],
        51: [(4, 1), (17, 0), (38, 1)],
        52: [(4, 1), (25, 0), (47, 1)],
        53: [(4, 1), (30, 0), (43, 1)],
        54: [(5, 0), (24, 0), (47, 1)],
        55: [(5, 0), (28, 1), (38, 0)],
        56: [(5, 0), (33, 0), (42, 0)],
        57: [(5, 0), (34, 1), (41, 1)],
        58: [(5, 0), (38, 1), (44, 0)],
        59: [(5, 0), (40, 1), (43, 1)],
        60: [(5, 1), (7, 1), (9, 0)],
        61: [(5, 1), (14, 1), (20, 1)],
        62: [(5, 1), (17, 0), (42, 1)],
        63: [(5, 1), (21, 1), (48, 1)],
        64: [(5, 1), (31, 0), (32, 1)],
        65: [(6, 0), (7, 0), (18, 0)],
        66: [(6, 0), (9, 0), (45, 1)],
        67: [(6, 0), (11, 1), (21, 0)],
        68: [(6, 0), (17, 0), (18, 0)],
        69: [(6, 0), (28, 0), (35, 1)],
        70: [(6, 0), (34, 1), (45, 0)],
        71: [(6, 1), (8, 1), (9, 0)],
        72: [(6, 1), (8, 1), (17, 1)],
        73: [(6, 1), (9, 0), (31, 1)],
        74: [(6, 1), (10, 1), (50, 1)],
        75: [(6, 1), (12, 0), (36, 1)],
        76: [(6, 1), (15, 1), (38, 1)],
        77: [(6, 1), (16, 0), (26, 1)],
        78: [(6, 1), (16, 1), (30, 1)],
        79: [(6, 1), (27, 1), (29, 1)],
        80: [(7, 0), (9, 1), (17, 0)],
        81: [(7, 0), (14, 1), (33, 0)],
        82: [(7, 0), (15, 1), (48, 0)],
        83: [(7, 0), (18, 1), (34, 1)],
        84: [(7, 0), (20, 1), (38, 1)],
        85: [(7, 0), (27, 1), (48, 1)],
        86: [(7, 1), (8, 1), (42, 0)],
        87: [(7, 1), (9, 1), (13, 0)],
        88: [(7, 1), (10, 1), (20, 1)],
        89: [(7, 1), (12, 0), (21, 0)],
        90: [(7, 1), (17, 1), (20, 1)],
        91: [(7, 1), (19, 1), (46, 0)],
        92: [(7, 1), (22, 0), (47, 0)],
        93: [(7, 1), (35, 0), (50, 0)],
        94: [(7, 1), (36, 1), (38, 1)],
        95: [(8, 0), (10, 0), (23, 1)],
        96: [(8, 0), (12, 0), (47, 0)],
        97: [(8, 0), (19, 1), (43, 0)],
        98: [(8, 0), (29, 0), (40, 1)],
        99: [(8, 0), (40, 0), (42, 1)],
        100: [(8, 1), (14, 0), (24, 0)],
        101: [(8, 1), (15, 0), (28, 1)],
        102: [(8, 1), (18, 0), (28, 1)],
        103: [(8, 1), (19, 1), (34, 0)],
        104: [(9, 0), (31, 0), (50, 1)],
        105: [(9, 0), (42, 1), (48, 0)],
        106: [(9, 1), (16, 1), (26, 1)],
        107: [(9, 1), (39, 1), (48, 0)],
        108: [(10, 1), (17, 1), (41, 1)],
        109: [(10, 1), (40, 1), (42, 1)],
        110: [(10, 1), (42, 1), (43, 0)],
        111: [(10, 1), (42, 1), (47, 1)],
        112: [(11, 0), (12, 0), (48, 1)],
        113: [(11, 0), (25, 0), (47, 1)],
        114: [(11, 0), (25, 0), (48, 0)],
        115: [(11, 0), (31, 1), (49, 0)],
        116: [(11, 0), (39, 1), (46, 1)],
        117: [(11, 1), (16, 0), (20, 1)],
        118: [(11, 1), (21, 1), (47, 1)],
        119: [(11, 1), (25, 1), (28, 1)],
        120: [(11, 1), (36, 0), (45, 0)],
        121: [(12, 0), (15, 0), (42, 1)],
        122: [(12, 0), (23, 0), (31, 0)],
        123: [(12, 1), (18, 0), (23, 0)],
        124: [(12, 1), (19, 0), (30, 0)],
        125: [(12, 1), (19, 1), (43, 1)],
        126: [(12, 1), (23, 0), (27, 0)],
        127: [(13, 0), (19, 0), (43, 1)],
        128: [(13, 0), (20, 1), (37, 1)],
        129: [(13, 0), (21, 0), (44, 1)],
        130: [(13, 0), (34, 1), (40, 0)],
        131: [(14, 0), (17, 1), (25, 0)],
        132: [(14, 0), (19, 1), (39, 0)],
        133: [(14, 0), (25, 1), (49, 1)],
        134: [(14, 0), (34, 1), (37, 0)],
        135: [(14, 0), (37, 1), (39, 0)],
        136: [(14, 1), (24, 1), (42, 1)],
        137: [(14, 1), (35, 1), (41, 0)],
        138: [(15, 0), (25, 0), (44, 1)],
        139: [(15, 0), (25, 0), (49, 1)],
        140: [(15, 0), (25, 1), (36, 0)],
        141: [(15, 0), (26, 0), (41, 0)],
        142: [(15, 0), (31, 1), (36, 1)],
        143: [(15, 1), (16, 0), (24, 0)],
        144: [(15, 1), (18, 1), (35, 0)],
        145: [(15, 1), (23, 1), (27, 1)],
        146: [(15, 1), (28, 0), (29, 0)],
        147: [(15, 1), (28, 0), (33, 0)],
        148: [(15, 1), (39, 0), (49, 0)],
        149: [(16, 0), (19, 1), (25, 0)],
        150: [(16, 0), (20, 0), (36, 1)],
        151: [(16, 0), (25, 0), (33, 0)],
        152: [(16, 0), (31, 0), (36, 0)],
        153: [(16, 1), (25, 0), (45, 1)],
        154: [(16, 1), (26, 0), (38, 0)],
        155: [(16, 1), (39, 1), (48, 0)],
        156: [(17, 0), (26, 0), (50, 1)],
        157: [(17, 1), (19, 1), (28, 0)],
        158: [(17, 1), (19, 1), (41, 1)],
        159: [(18, 0), (24, 1), (28, 0)],
        160: [(18, 1), (20, 0), (45, 0)],
        161: [(18, 1), (20, 1), (37, 1)],
        162: [(18, 1), (25, 0), (34, 0)],
        163: [(18, 1), (27, 1), (31, 1)],
        164: [(18, 1), (37, 1), (39, 0)],
        165: [(19, 0), (29, 0), (47, 1)],
        166: [(19, 1), (23, 1), (25, 0)],
        167: [(19, 1), (24, 0), (34, 1)],
        168: [(19, 1), (46, 0), (47, 1)],
        169: [(20, 0), (23, 1), (24, 0)],
        170: [(20, 0), (32, 0), (45, 0)],
        171: [(20, 0), (41, 0), (43, 1)],
        172: [(20, 1), (23, 0), (34, 0)],
        173: [(20, 1), (29, 0), (38, 1)],
        174: [(21, 0), (27, 0), (36, 0)],
        175: [(21, 0), (33, 0), (44, 0)],
        176: [(21, 0), (34, 0), (42, 0)],
        177: [(21, 1), (24, 1), (35, 0)],
        178: [(21, 1), (33, 0), (46, 1)],
        179: [(21, 1), (34, 0), (35, 0)],
        180: [(21, 1), (34, 1), (35, 1)],
        181: [(21, 1), (34, 1), (50, 0)],
        182: [(21, 1), (43, 0), (45, 0)],
        183: [(22, 0), (28, 0), (37, 1)],
        184: [(22, 0), (30, 1), (39, 1)],
        185: [(22, 0), (42, 0), (44, 0)],
        186: [(22, 0), (43, 0), (48, 1)],
        187: [(22, 1), (24, 0), (45, 0)],
        188: [(22, 1), (46, 1), (47, 0)],
        189: [(23, 0), (33, 1), (42, 0)],
        190: [(23, 0), (37, 0), (45, 1)],
        191: [(24, 0), (45, 0), (48, 1)],
        192: [(24, 1), (27, 1), (30, 1)],
        193: [(24, 1), (32, 1), (39, 1)],
        194: [(24, 1), (37, 0), (47, 0)],
        195: [(25, 0), (37, 0), (39, 1)],
        196: [(25, 0), (37, 1), (44, 0)],
        197: [(25, 1), (27, 0), (28, 0)],
        198: [(25, 1), (27, 1), (45, 1)],
        199: [(25, 1), (28, 1), (30, 0)],
        200: [(25, 1), (41, 0), (46, 0)],
        201: [(26, 0), (29, 0), (35, 0)],
        202: [(26, 1), (31, 1), (36, 0)],
        203: [(27, 0), (35, 0), (46, 0)],
        204: [(27, 1), (29, 1), (50, 1)],
        205: [(28, 1), (40, 1), (43, 1)],
        206: [(30, 0), (37, 1), (39, 1)],
        207: [(31, 1), (41, 0), (46, 0)],
        208: [(32, 0), (41, 0), (43, 1)],
        209: [(32, 0), (45, 0), (49, 0)],
        210: [(33, 1), (41, 1), (47, 1)],
        211: [(35, 0), (42, 0), (48, 1)],
        212: [(37, 0), (39, 1), (43, 0)],
        213: [(37, 0), (40, 1), (44, 1)],
        214: [(37, 1), (46, 0), (48, 0)],
        215: [(39, 0), (40, 0), (41, 0)],
        216: [(40, 0), (42, 1), (50, 0)],
        217: [(40, 1), (44, 0), (46, 0)],
    }
    _cert = [
        (1, 0),
    ]
    cnf_step(list(_cnf.values()), _cert)
    # check(list(_cnf.values()), _cert)
    print(f'there are 2 ** {(num_literals - len(_cert))} options')
